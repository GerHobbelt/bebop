//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Pierogi.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class PierogiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, COMMENT=24, 
		LINE_COMMENT=25, WHITESPACE=26, UPPER_NAME=27, LOWER_NAME=28, STRING=29, 
		DIGITS=30;
	public const int
		RULE_packagePath = 0, RULE_packageSpecifier = 1, RULE_scalarType = 2, 
		RULE_arrayType = 3, RULE_definedType = 4, RULE_type = 5, RULE_deprecatedAnnotation = 6, 
		RULE_annotation = 7, RULE_enumBranch = 8, RULE_enumDefinition = 9, RULE_structField = 10, 
		RULE_structDefinition = 11, RULE_messageField = 12, RULE_messageDefinition = 13, 
		RULE_definition = 14, RULE_schema = 15;
	public static readonly string[] ruleNames = {
		"packagePath", "packageSpecifier", "scalarType", "arrayType", "definedType", 
		"type", "deprecatedAnnotation", "annotation", "enumBranch", "enumDefinition", 
		"structField", "structDefinition", "messageField", "messageDefinition", 
		"definition", "schema"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'package'", "';'", "'bool'", "'byte'", "'uint'", "'int'", 
		"'float'", "'string'", "'guid'", "'[]'", "'['", "'deprecated'", "'('", 
		"')'", "']'", "'='", "'enum'", "'{'", "'}'", "'readonly'", "'struct'", 
		"'message'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"COMMENT", "LINE_COMMENT", "WHITESPACE", "UPPER_NAME", "LOWER_NAME", "STRING", 
		"DIGITS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pierogi.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PierogiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PierogiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PierogiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PackagePathContext : ParserRuleContext {
		public ITerminalNode[] LOWER_NAME() { return GetTokens(PierogiParser.LOWER_NAME); }
		public ITerminalNode LOWER_NAME(int i) {
			return GetToken(PierogiParser.LOWER_NAME, i);
		}
		public PackagePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagePath; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterPackagePath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitPackagePath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagePathContext packagePath() {
		PackagePathContext _localctx = new PackagePathContext(Context, State);
		EnterRule(_localctx, 0, RULE_packagePath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(LOWER_NAME);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 33; Match(T__0);
				State = 34; Match(LOWER_NAME);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageSpecifierContext : ParserRuleContext {
		public PackagePathContext packagePath() {
			return GetRuleContext<PackagePathContext>(0);
		}
		public PackageSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterPackageSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitPackageSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageSpecifierContext packageSpecifier() {
		PackageSpecifierContext _localctx = new PackageSpecifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__1);
			State = 41; packagePath();
			State = 42; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_scalarType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; scalarType();
			State = 47; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedTypeContext : ParserRuleContext {
		public ITerminalNode UPPER_NAME() { return GetToken(PierogiParser.UPPER_NAME, 0); }
		public DefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterDefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitDefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedTypeContext definedType() {
		DefinedTypeContext _localctx = new DefinedTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_definedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(UPPER_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public DefinedTypeContext definedType() {
			return GetRuleContext<DefinedTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; scalarType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53; definedType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeprecatedAnnotationContext : ParserRuleContext {
		public IToken reason;
		public ITerminalNode STRING() { return GetToken(PierogiParser.STRING, 0); }
		public DeprecatedAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deprecatedAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterDeprecatedAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitDeprecatedAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeprecatedAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeprecatedAnnotationContext deprecatedAnnotation() {
		DeprecatedAnnotationContext _localctx = new DeprecatedAnnotationContext(Context, State);
		EnterRule(_localctx, 12, RULE_deprecatedAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(T__11);
			State = 57; Match(T__12);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 58; Match(T__13);
				State = 59; _localctx.reason = Match(STRING);
				State = 60; Match(T__14);
				}
			}

			State = 63; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public DeprecatedAnnotationContext deprecatedAnnotation() {
			return GetRuleContext<DeprecatedAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; deprecatedAnnotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBranchContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode UPPER_NAME() { return GetToken(PierogiParser.UPPER_NAME, 0); }
		public ITerminalNode DIGITS() { return GetToken(PierogiParser.DIGITS, 0); }
		public EnumBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBranch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterEnumBranch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitEnumBranch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBranchContext enumBranch() {
		EnumBranchContext _localctx = new EnumBranchContext(Context, State);
		EnterRule(_localctx, 16, RULE_enumBranch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(UPPER_NAME);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 68; Match(T__16);
				State = 69; _localctx.value = Match(DIGITS);
				}
			}

			State = 72; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public ITerminalNode UPPER_NAME() { return GetToken(PierogiParser.UPPER_NAME, 0); }
		public EnumBranchContext[] enumBranch() {
			return GetRuleContexts<EnumBranchContext>();
		}
		public EnumBranchContext enumBranch(int i) {
			return GetRuleContext<EnumBranchContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(T__17);
			State = 75; Match(UPPER_NAME);
			State = 76; Match(T__18);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 77; enumBranch();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==UPPER_NAME );
			State = 82; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LOWER_NAME() { return GetToken(PierogiParser.LOWER_NAME, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterStructField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitStructField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 20, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; type();
			State = 85; Match(LOWER_NAME);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 86; annotation();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public ITerminalNode UPPER_NAME() { return GetToken(PierogiParser.UPPER_NAME, 0); }
		public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 94; Match(T__20);
				}
			}

			State = 97; Match(T__21);
			State = 98; Match(UPPER_NAME);
			State = 99; Match(T__18);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 100; structField();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << UPPER_NAME))) != 0) );
			State = 105; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageFieldContext : ParserRuleContext {
		public IToken index;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LOWER_NAME() { return GetToken(PierogiParser.LOWER_NAME, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode DIGITS() { return GetToken(PierogiParser.DIGITS, 0); }
		public MessageFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterMessageField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitMessageField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageFieldContext messageField() {
		MessageFieldContext _localctx = new MessageFieldContext(Context, State);
		EnterRule(_localctx, 24, RULE_messageField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; type();
			State = 108; Match(LOWER_NAME);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 109; Match(T__16);
				State = 110; _localctx.index = Match(DIGITS);
				}
			}

			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 113; annotation();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageDefinitionContext : ParserRuleContext {
		public ITerminalNode UPPER_NAME() { return GetToken(PierogiParser.UPPER_NAME, 0); }
		public MessageFieldContext[] messageField() {
			return GetRuleContexts<MessageFieldContext>();
		}
		public MessageFieldContext messageField(int i) {
			return GetRuleContext<MessageFieldContext>(i);
		}
		public MessageDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterMessageDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitMessageDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageDefinitionContext messageDefinition() {
		MessageDefinitionContext _localctx = new MessageDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_messageDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(T__22);
			State = 122; Match(UPPER_NAME);
			State = 123; Match(T__18);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 124; messageField();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << UPPER_NAME))) != 0) );
			State = 129; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public MessageDefinitionContext messageDefinition() {
			return GetRuleContext<MessageDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_definition);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; enumDefinition();
				}
				break;
			case T__20:
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; structDefinition();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; messageDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		public PackageSpecifierContext packageSpecifier() {
			return GetRuleContext<PackageSpecifierContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPierogiListener typedListener = listener as IPierogiListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPierogiVisitor<TResult> typedVisitor = visitor as IPierogiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 30, RULE_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 136; packageSpecifier();
				}
			}

			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) {
				{
				{
				State = 139; definition();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\x94', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x39', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '@', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'I', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x6', '\v', 'Q', '\n', '\v', '\r', '\v', '\xE', '\v', 
		'R', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', 'Z', '\n', '\f', '\f', '\f', '\xE', '\f', ']', '\v', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x5', '\r', '\x62', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', 'h', 
		'\n', '\r', '\r', '\r', '\xE', '\r', 'i', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'r', '\n', 
		'\xE', '\x3', '\xE', '\a', '\xE', 'u', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', 'x', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '\x80', '\n', '\xF', 
		'\r', '\xF', '\xE', '\xF', '\x81', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x89', '\n', '\x10', 
		'\x3', '\x11', '\x5', '\x11', '\x8C', '\n', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x8F', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x92', '\v', 
		'\x11', '\x3', '\x11', '\x2', '\x2', '\x12', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\x2', '\x3', '\x3', '\x2', '\x6', '\f', '\x2', '\x93', '\x2', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '.', '\x3', '\x2', '\x2', '\x2', '\b', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x33', '\x3', '\x2', '\x2', '\x2', '\f', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\xE', ':', '\x3', '\x2', '\x2', '\x2', '\x10', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'L', '\x3', '\x2', '\x2', '\x2', '\x16', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1A', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '{', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x88', '\x3', '\x2', '\x2', '\x2', ' ', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\'', '\a', '\x1E', '\x2', '\x2', '#', '$', '\a', '\x3', 
		'\x2', '\x2', '$', '&', '\a', '\x1E', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '\x3', 
		'\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\a', '\x4', '\x2', '\x2', '+', ',', '\x5', '\x2', '\x2', '\x2', 
		',', '-', '\a', '\x5', '\x2', '\x2', '-', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\t', '\x2', '\x2', '\x2', '/', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x5', '\x6', '\x4', '\x2', '\x31', '\x32', '\a', 
		'\r', '\x2', '\x2', '\x32', '\t', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\x1D', '\x2', '\x2', '\x34', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x39', '\x5', '\x6', '\x4', '\x2', '\x36', '\x39', '\x5', 
		'\b', '\x5', '\x2', '\x37', '\x39', '\x5', '\n', '\x6', '\x2', '\x38', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\r', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\a', '\xE', '\x2', '\x2', ';', '?', '\a', 
		'\xF', '\x2', '\x2', '<', '=', '\a', '\x10', '\x2', '\x2', '=', '>', '\a', 
		'\x1F', '\x2', '\x2', '>', '@', '\a', '\x11', '\x2', '\x2', '?', '<', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x12', '\x2', 
		'\x2', '\x42', '\xF', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x5', 
		'\xE', '\b', '\x2', '\x44', '\x11', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'H', '\a', '\x1D', '\x2', '\x2', '\x46', 'G', '\a', '\x13', '\x2', '\x2', 
		'G', 'I', '\a', ' ', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\a', '\x5', '\x2', '\x2', 'K', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\a', '\x14', '\x2', '\x2', 'M', 'N', '\a', '\x1D', '\x2', 
		'\x2', 'N', 'P', '\a', '\x15', '\x2', '\x2', 'O', 'Q', '\x5', '\x12', 
		'\n', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x16', 
		'\x2', '\x2', 'U', '\x15', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x5', 
		'\f', '\a', '\x2', 'W', '[', '\a', '\x1E', '\x2', '\x2', 'X', 'Z', '\x5', 
		'\x10', '\t', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', 
		'[', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\x5', '\x2', '\x2', 
		'_', '\x17', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\a', '\x17', '\x2', 
		'\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x18', '\x2', '\x2', '\x64', '\x65', '\a', '\x1D', '\x2', 
		'\x2', '\x65', 'g', '\a', '\x15', '\x2', '\x2', '\x66', 'h', '\x5', '\x16', 
		'\f', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', 
		'\x16', '\x2', '\x2', 'l', '\x19', '\x3', '\x2', '\x2', '\x2', 'm', 'n', 
		'\x5', '\f', '\a', '\x2', 'n', 'q', '\a', '\x1E', '\x2', '\x2', 'o', 'p', 
		'\a', '\x13', '\x2', '\x2', 'p', 'r', '\a', ' ', '\x2', '\x2', 'q', 'o', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 
		'v', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', '\x10', '\t', '\x2', 
		't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', 'y', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\a', '\x5', '\x2', '\x2', 'z', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\a', '\x19', '\x2', '\x2', '|', '}', '\a', '\x1D', '\x2', 
		'\x2', '}', '\x7F', '\a', '\x15', '\x2', '\x2', '~', '\x80', '\x5', '\x1A', 
		'\xE', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\a', '\x16', '\x2', '\x2', '\x84', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x89', '\x5', '\x14', '\v', '\x2', 
		'\x86', '\x89', '\x5', '\x18', '\r', '\x2', '\x87', '\x89', '\x5', '\x1C', 
		'\xF', '\x2', '\x88', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x4', 
		'\x3', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8F', '\x5', '\x1E', '\x10', '\x2', '\x8E', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '!', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\'', '\x38', '?', 'H', 'R', '[', '\x61', 'i', 'q', 
		'v', '\x81', '\x88', '\x8B', '\x90',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
